{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2022-09-22T00:02:38.046147+00:00",
  "repo": "chris-wood/draft-unreliable-ohttp",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "I_kwDOH1ALCM5QRZfd",
      "title": "Conditional gateway behaviour can leak encapsulated information",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/issues/3",
      "state": "OPEN",
      "author": "rillian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The role of the Gateway Resource in reliable OHTTP is to decrypt the Encapsulated Request and forward it to the Target Resource. We should probably say something about the privacy risk of using the decrypted contents of the Encapsulated request in any conditional behaviour, since this leaks information which should be private between the Gateway and Client to the Relay, and possibly to external traffic observers.\r\n\r\nAn example of such conditional behaviour would be looking at the `Host` or other header fields in the Encapsulated Request when deciding whether to enforce unreliable OHTTP by returning `406 Not Acceptable`, or deciding whether to return an Encapsulated Response when the `Accept` header received from the Relay allows this choice.\r\n\r\nProbably goes in the Security Considerations and/or Gateway Considerations sections.\r\n\r\n> Note that while it's possible for the Gateway to decide whether to\r\n> require an unreliable OHTTP request based on information in the\r\n> Encapsulated Request, doing so leaks information about the contents\r\n> to the Relay. Implementations must take this into account in\r\n> deployment so they do not violate the privacy properties of the\r\n> OHTTP channel.\r\n",
      "createdAt": "2022-08-22T17:10:02Z",
      "updatedAt": "2022-08-23T10:13:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "I don't think we should allow or recommend this type of behavior, although we can't enforce what happens if someone violates the rule. I think we should just document what can happen if this conditional behavior is implemented. Perhaps we could extend the [differential treatment](https://ietf-wg-ohai.github.io/oblivious-http/draft-ietf-ohai-ohttp.html#name-differential-treatment) section in the main OHTTP spec to include this discussion?",
          "createdAt": "2022-08-22T20:27:39Z",
          "updatedAt": "2022-08-22T20:27:39Z"
        },
        {
          "author": "rillian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds reasonable, although I think the OHTTP draft is at the end of last call. It does already have a number of warnings about leaking encapsulated information, as you mention. I think we should build on that in this draft by just mentioning the issue as a continuation of those warnings.\r\n\r\nPicking a delivery policy based on `Host` or another header is something I can imagine a new implementation doing, so I wanted to say something against it here where the enabling logic originates.",
          "createdAt": "2022-08-23T01:03:55Z",
          "updatedAt": "2022-08-23T01:03:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "> Sounds reasonable, although I think the OHTTP draft is at the end of last call. It does already have a number of warnings about leaking encapsulated information, as you mention. I think we should build on that in this draft by just mentioning the issue as a continuation of those warnings.\r\n\r\nRight, I meant to extend the discussion _here in this draft_, not to update the main spec.\r\n\r\n> Picking a delivery policy based on Host or another header is something I can imagine a new implementation doing, so I wanted to say something against it here where the enabling logic originates.\r\n\r\nYep, that makes sense \ud83d\udc4d ",
          "createdAt": "2022-08-23T10:13:56Z",
          "updatedAt": "2022-08-23T10:13:56Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOH1ALCM5QfELX",
      "title": "Consider Prefer: respond-async",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/issues/5",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current design uses a new media type (which appears to be zero-length always, I couldn't see where the content was defined).\r\n\r\nAn alternative is this: [`Prefer: respond-async`](https://httpwg.org/specs/rfc7240.html#respond-async), which allows a client to indicate that it might prefer a 202 status response rather than a full answer to its request.",
      "createdAt": "2022-08-25T04:53:06Z",
      "updatedAt": "2022-09-07T16:18:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "rillian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Interesting. I guess this would look like the client sending:\r\n```http\r\nPOST / HTTP/1.1\r\nHost: ohttp.example.com\r\nContent-Type: message/ohttp-req\r\nPrefer: respond-async\r\nContent-Length: 559\r\n\r\n<encapsulated bhttp request>\r\n```\r\n\r\nThe Relay or Gateway would choose to respond either by queuing the request for later processing and returning:\r\n```http\r\nHTTP/1.1 202 Accepted\r\nContent-Length: 0\r\n\r\n<empty body>\r\n```\r\nor by forwarding and returning as in reliable ohttp:\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: message/bhttp-res\r\nContent-Length: 153\r\n\r\n<encapsulated bhttp response>\r\n```\r\n\r\nQuite similar except for the empty `Content-Type` header on the zero-length unreliable response body. This leaves the decision up to the servers rather than the client like the `Accept: message/ohttp-ack` method.\r\n\r\n## Pros\r\n\r\n- Reuses an [existing mechanism](https://www.rfc-editor.org/rfc/rfc7240#section-4.1)\r\n- Servers ultimately choose delivery method\r\n- `wait` parameter allows clients to give a delivery-delay hint\r\n\r\n## Cons\r\n\r\n- More complicated semantics, see e.g. #8 \r\n- The `Accept` mechanism is [documented](https://www.rfc-editor.org/rfc/rfc9110.html#section-12.5.1) in the base HTTP Semantics spec while `Prefer` header is described by a [separate rfc](https://httpwg.org/specs/rfc7240.html) and may not be as well-known.",
          "createdAt": "2022-08-26T21:39:29Z",
          "updatedAt": "2022-09-07T16:18:32Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "body": "Practically speaking, Accept only gives a suggestion that a server can ignore, so I think that the two are functionally equivalent.\r\n\r\nI don't see any value in the `wait` parameter in this case, unless the processing at the gateway is likely to take a very long time (and then you have to deal with the potential that the value is ignored anyway).",
          "createdAt": "2022-09-02T00:06:11Z",
          "updatedAt": "2022-09-02T00:06:11Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOH1ALCM5Q13tR",
      "title": "who requires acknowledgement",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/issues/7",
      "state": "CLOSED",
      "author": "rillian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> STAR can use OHTTP to send client reports, but it requires the Oblivious Gateway Resource to produce an encrypted acknowledgement to the clients for every report.\r\n\r\nThe antecedent of \"it\" is ambiguous here. We should clarify that it's OHTTP requiring the encryped ack, not STAR. Maybe just \"but that requires\"?",
      "createdAt": "2022-08-30T20:55:53Z",
      "updatedAt": "2022-09-20T13:31:50Z",
      "closedAt": "2022-09-20T13:31:50Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "I_kwDOH1ALCM5RCUnG",
      "title": "Controlling batch size",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/issues/8",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "There is a suggestion that a relay might delay requests and forward them in a batch.  Here are some ideas that leverage `Prefer` to give the client some control (or at least some input) into that process.\r\n\r\n`Prefer: respond-async, forward-batch;n=5` says that you should forward in a batch of at least 5 requests and respond asynchronously.\r\n\r\n`Prefer: respond-async;wait=10, forward-batch;n=5` says that the client prefers an asynchronous response if it has to wait more than 10s, but it also prefers forwarding in a batch of size 10.  These two combine so that the client gets a direct response if the answer comes in 10s, but only if the relay is able to forward the request in a batch of at least 5 requests.\r\n\r\n`Prefer: forward-batch;n=5;wait=10` doesn't allow for asynchronous forwarding, but it says that the client prefers forwarding in a batch.  This one says to wait up to 10 seconds if the batch isn't at least 5 requests, but then send it anyway if there are no other requests.\r\n\r\nI don't know how likely it is that someone will implement this.  I wouldn't specify something like this unless someone really wanted that, but something like this might make sense for more sensitive data submission applications.",
      "createdAt": "2022-09-02T00:13:23Z",
      "updatedAt": "2022-09-02T13:21:49Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "Thanks for filing this! Right now, I envision relays being specifically configured for the application that's using it. Part of that configuration might describe what headers the relay is allowed to attach to forwarded requests, where requests are forwarded (what gateway URL, basically), and so on. If a relay was to support unreliable OHTTP, I imagine this configuration would be extended to include information about preferred batch size or delay time.\r\n\r\nThat said, I could imagine clients having more influence over this information for certain applications. Take DAP for example, where one might want to use a batching and shuffling relay to upload reports to the leader for the purposes of local DP amplification. The batching and shuffling parameters likely depend on the details of a particular task. One could configure a different relay endpoint for each distinct task, but it might be operationally simpler to just use the same relay with tunable batching and shuffling parameters.",
          "createdAt": "2022-09-02T13:21:49Z",
          "updatedAt": "2022-09-02T13:21:49Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOH1ALCM49VhcS",
      "title": "Add Ralph Giles as an author",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/pull/1",
      "state": "MERGED",
      "author": "rillian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Also very minor editorial",
      "createdAt": "2022-08-17T16:18:57Z",
      "updatedAt": "2022-08-17T17:13:55Z",
      "baseRepository": "chris-wood/draft-unreliable-ohttp",
      "baseRefName": "main",
      "baseRefOid": "87e5aff8a322a589ee62ef537235bc7552a10dbc",
      "headRepository": "rillian/draft-unreliable-ohttp",
      "headRefName": "authorship",
      "headRefOid": "e88eee65c7a6a5a84cbbc1e2a6f6978aa1e95739",
      "closedAt": "2022-08-17T16:24:22Z",
      "mergedAt": "2022-08-17T16:24:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "545d444cc1187c8a5b6e19e202772f9f73984379"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH1ALCM5AI12z",
          "commit": {
            "abbreviatedOid": "e88eee6"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-17T16:24:17Z",
          "updatedAt": "2022-08-17T16:24:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOH1ALCM49fKUP",
      "title": "Document 406 Not Acceptable",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/pull/2",
      "state": "MERGED",
      "author": "rillian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Recommend Relay and Gateway use the `406 Not Acceptable` status code to signal unreliable OHTTP as a requirement to the Client.\r\n\r\nAlso some more editoral.",
      "createdAt": "2022-08-19T21:28:38Z",
      "updatedAt": "2022-08-22T17:32:46Z",
      "baseRepository": "chris-wood/draft-unreliable-ohttp",
      "baseRefName": "main",
      "baseRefOid": "545d444cc1187c8a5b6e19e202772f9f73984379",
      "headRepository": "rillian/draft-unreliable-ohttp",
      "headRefName": "406",
      "headRefOid": "dbab178cbeff38930738625e08f9f8f9fbd2552f",
      "closedAt": "2022-08-22T17:19:39Z",
      "mergedAt": "2022-08-22T17:19:39Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ea91424703f50bde4230b852b86fba431e2ca3fa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH1ALCM5AZ_zz",
          "commit": {
            "abbreviatedOid": "b21988c"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good! My only blocking request is to remove the text about conditioning unreliable answers based on decapsulated request information.",
          "createdAt": "2022-08-22T14:05:11Z",
          "updatedAt": "2022-08-22T14:08:56Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nunreliable delivery up to the Relay and Gateway Resources.\r\n```\r\nLet's let the main spec (covering reliable mode) deal with what responses are invalid and not repeat them here.",
              "createdAt": "2022-08-22T14:05:11Z",
              "updatedAt": "2022-08-22T14:08:56Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\ncontent type to the Client. It can buffer the request to be sent to the Oblivious\r\nGateway Resource at some point in the future, or choose to forward it immediately.\r\n```\r\n\r\nI don't think we should require buffering here, since that's an implementation-specific decision.",
              "createdAt": "2022-08-22T14:06:01Z",
              "updatedAt": "2022-08-22T14:08:56Z"
            },
            {
              "originalPosition": 85,
              "body": "```suggestion\r\nOHTTP request, i.e., without an Accept header matching \"message/ohttp-ack\",\r\n```",
              "createdAt": "2022-08-22T14:06:37Z",
              "updatedAt": "2022-08-22T14:08:56Z"
            },
            {
              "originalPosition": 100,
              "body": "```suggestion\r\nwith `406 Not Acceptable` to any requests which require reliable return of an\r\n```",
              "createdAt": "2022-08-22T14:07:04Z",
              "updatedAt": "2022-08-22T14:08:56Z"
            },
            {
              "originalPosition": 102,
              "body": "```suggestion\r\nClient, and the Client can then fail or retry with unreliable delivery according to\r\n```",
              "createdAt": "2022-08-22T14:07:19Z",
              "updatedAt": "2022-08-22T14:08:56Z"
            },
            {
              "originalPosition": 105,
              "body": "This is interesting =) Given the privacy implications here, I would recommend we remove this text and file an issue to consider adding it back. ",
              "createdAt": "2022-08-22T14:08:23Z",
              "updatedAt": "2022-08-22T14:08:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH1ALCM5AbAKh",
          "commit": {
            "abbreviatedOid": "b21988c"
          },
          "author": "rillian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-22T16:40:14Z",
          "updatedAt": "2022-08-22T16:40:14Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "I see you're a \"more commas\" person. :)",
              "createdAt": "2022-08-22T16:40:14Z",
              "updatedAt": "2022-08-22T16:40:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH1ALCM5AbAmd",
          "commit": {
            "abbreviatedOid": "b21988c"
          },
          "author": "rillian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-22T16:41:04Z",
          "updatedAt": "2022-08-22T16:41:05Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "Ok. This is also a relaxation of your previous wording, so that's fine from my point of view.",
              "createdAt": "2022-08-22T16:41:04Z",
              "updatedAt": "2022-08-22T16:41:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH1ALCM5AbCv7",
          "commit": {
            "abbreviatedOid": "b21988c"
          },
          "author": "rillian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-22T16:44:55Z",
          "updatedAt": "2022-08-22T16:44:55Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "It might make more sense in the Security section, but only after we add the `Accept: message/*` bit. I will move.",
              "createdAt": "2022-08-22T16:44:55Z",
              "updatedAt": "2022-08-22T16:44:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH1ALCM5AbQZ_",
          "commit": {
            "abbreviatedOid": "dbab178"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-22T17:19:35Z",
          "updatedAt": "2022-08-22T17:19:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH1ALCM5AbU0Q",
          "commit": {
            "abbreviatedOid": "b21988c"
          },
          "author": "rillian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-22T17:32:42Z",
          "updatedAt": "2022-08-22T17:32:42Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "https://github.com/chris-wood/draft-unreliable-ohttp/issues/3",
              "createdAt": "2022-08-22T17:32:42Z",
              "updatedAt": "2022-08-22T17:32:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOH1ALCM49milA",
      "title": "Document Accept: message/* for optional enable.",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/pull/4",
      "state": "MERGED",
      "author": "rillian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Clarify that clients ultimately control whether the extension is\r\nactivated, and that the can leave the choice up to the Relay and\r\nGateway Resource.",
      "createdAt": "2022-08-23T01:00:27Z",
      "updatedAt": "2022-08-23T13:46:49Z",
      "baseRepository": "chris-wood/draft-unreliable-ohttp",
      "baseRefName": "main",
      "baseRefOid": "ea91424703f50bde4230b852b86fba431e2ca3fa",
      "headRepository": "rillian/draft-unreliable-ohttp",
      "headRefName": "accept",
      "headRefOid": "cea47f8e73da5af000f011e2ca27451d1a22fe82",
      "closedAt": "2022-08-23T13:01:44Z",
      "mergedAt": "2022-08-23T13:01:44Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "bb96558d703947c7b7b880ba98270853b4cc0fab"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH1ALCM5Ae9zn",
          "commit": {
            "abbreviatedOid": "a8e733d"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-23T10:14:24Z",
          "updatedAt": "2022-08-23T10:15:13Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nEncapsulated Response according to {{OHTTP}}.\r\n```",
              "createdAt": "2022-08-23T10:14:24Z",
              "updatedAt": "2022-08-23T10:15:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOH1ALCM4-C8Hb",
      "title": "Some edits before -00",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/pull/6",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-30T12:58:36Z",
      "updatedAt": "2022-08-30T17:30:43Z",
      "baseRepository": "chris-wood/draft-unreliable-ohttp",
      "baseRefName": "main",
      "baseRefOid": "bb96558d703947c7b7b880ba98270853b4cc0fab",
      "headRepository": "chris-wood/draft-unreliable-ohttp",
      "headRefName": "caw/some-edits",
      "headRefOid": "6de8802daa8d826acc9c9ad3005ad1375b36dfcf",
      "closedAt": "2022-08-30T17:30:43Z",
      "mergedAt": "2022-08-30T17:30:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3ff564b4a6de1604d5744f743df4640c9d786df4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH1ALCM5BAv9n",
          "commit": {
            "abbreviatedOid": "6de8802"
          },
          "author": "rillian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-30T17:30:18Z",
          "updatedAt": "2022-08-30T17:30:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOH1ALCM4-f2m4",
      "title": "Ci fixes",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/pull/9",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As a recent draft, you picked up some errors from the template.  Nothing serious, but there were some performance problems in CI that this change will fix.",
      "createdAt": "2022-09-07T09:59:19Z",
      "updatedAt": "2022-09-12T12:37:56Z",
      "baseRepository": "chris-wood/draft-unreliable-ohttp",
      "baseRefName": "main",
      "baseRefOid": "3ff564b4a6de1604d5744f743df4640c9d786df4",
      "headRepository": "martinthomson/unreliable-ohttp",
      "headRefName": "ci-fixes",
      "headRefOid": "24d9ffe7f3b825f890d80cf5997bc5829e8d8da3",
      "closedAt": "2022-09-12T12:37:55Z",
      "mergedAt": "2022-09-12T12:37:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "be3b15208b91e30ed8519e822dd2337be605706d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH1ALCM5BiCe7",
          "commit": {
            "abbreviatedOid": "24d9ffe"
          },
          "author": "rillian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks reasonable to me. Thanks!",
          "createdAt": "2022-09-07T15:56:49Z",
          "updatedAt": "2022-09-07T15:57:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH1ALCM5Bziuo",
          "commit": {
            "abbreviatedOid": "24d9ffe"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-12T12:36:45Z",
          "updatedAt": "2022-09-12T12:36:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 10,
      "id": "PR_kwDOH1ALCM4-hou5",
      "title": "Edit pass on STAR gateway considerations.",
      "url": "https://github.com/chris-wood/draft-unreliable-ohttp/pull/10",
      "state": "MERGED",
      "author": "rillian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Clarify how STAR would use OHTTP and how unreliable delivery helps.\r\n\r\nResolves https://github.com/chris-wood/draft-unreliable-ohttp/issues/7",
      "createdAt": "2022-09-07T16:46:16Z",
      "updatedAt": "2022-09-20T13:31:49Z",
      "baseRepository": "chris-wood/draft-unreliable-ohttp",
      "baseRefName": "main",
      "baseRefOid": "3ff564b4a6de1604d5744f743df4640c9d786df4",
      "headRepository": "rillian/draft-unreliable-ohttp",
      "headRefName": "star-clarity",
      "headRefOid": "9b62c9b2f36e4911cbdcc40dcf58c9d742f8cf45",
      "closedAt": "2022-09-20T13:31:49Z",
      "mergedAt": "2022-09-20T13:31:48Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ca207707b757af6d48d806b34020654fa82c31d0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH1ALCM5BzkG3",
          "commit": {
            "abbreviatedOid": "8ea9531"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-09-12T12:39:01Z",
          "updatedAt": "2022-09-12T12:39:57Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "This isn't true of all systems, especially Prio. For Prio, it doesn't really matter (under certain threat models) that the client's IP address is linked to their report, since the report leaks nothing about the individual data. I think we should either rephrase this, or revert to the previous text.",
              "createdAt": "2022-09-12T12:39:01Z",
              "updatedAt": "2022-09-12T12:39:57Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nan Encapsulated Response.\r\n```",
              "createdAt": "2022-09-12T12:39:51Z",
              "updatedAt": "2022-09-12T12:39:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH1ALCM5B82z2",
          "commit": {
            "abbreviatedOid": "8ea9531"
          },
          "author": "rillian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T21:28:44Z",
          "updatedAt": "2022-09-13T21:28:44Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Do you mean that the PRIO shuffler or aggregator breaks the link between the client IP address and their report?\r\n\r\nMore generally I was trying to get away from 'This is only motivated by this one proposal from another working group.' It's a good example but I didn't want to lead with Star. What about:\r\n> In privacy-preserving data collection systems, it can be important that...",
              "createdAt": "2022-09-13T21:28:44Z",
              "updatedAt": "2022-09-13T21:28:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH1ALCM5B849h",
          "commit": {
            "abbreviatedOid": "8ea9531"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T21:38:06Z",
          "updatedAt": "2022-09-13T21:38:07Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "> Do you mean that the PRIO shuffler or aggregator breaks the link between the client IP address and their report?\r\n\r\nNope! In Prio, each report is basically encrypted and never revealed in plaintext to an aggregator, so they leaking the IP address is not a problem.\r\n\r\nYour proposed alternate sounds good. I might say \"In _some_ privacy-preserving data collection systems, it can be important that...\"",
              "createdAt": "2022-09-13T21:38:06Z",
              "updatedAt": "2022-09-13T21:38:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH1ALCM5CY5hr",
          "commit": {
            "abbreviatedOid": "53009c4"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T13:29:37Z",
          "updatedAt": "2022-09-20T13:29:38Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nIn some privacy-preserving data collection systems such as {{STAR}}, it is important that client reports\r\n```",
              "createdAt": "2022-09-20T13:29:37Z",
              "updatedAt": "2022-09-20T13:29:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH1ALCM5CY59p",
          "commit": {
            "abbreviatedOid": "b7e8fd1"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T13:30:36Z",
          "updatedAt": "2022-09-20T13:30:37Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\ninformation, including their IP address. Systems like {{STAR}}, which\r\notherwise enforce privacy through filtering for heavy-hitters in the report data,\r\ncan use OHTTP to send client reports to achieve this separation.\r\n```",
              "createdAt": "2022-09-20T13:30:37Z",
              "updatedAt": "2022-09-20T13:30:37Z"
            }
          ]
        }
      ]
    }
  ]
}